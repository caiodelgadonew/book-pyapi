name: Code - Lint / Tests / Build / Deploy

on: [push]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

jobs:

  lint:
    name: Lint code Check
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./books
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  tests:
    name: Test Python Versions
    needs: lint
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./books
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11" ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Healthcheck test
        run: |
          cd .. 
          python -m uvicorn books.main:app &
          sleep 2
          curl -fsSL -X 'GET' 'http://localhost:8000/api/v1/health' -H 'accept: application/json' | jq --exit-status -n  'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
          kill %1

  build:
    name: Build and Push App
    needs: tests
    runs-on: ubuntu-22.04

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v4
        if: github.ref != 'refs/heads/main'
        with:
          push: false
          tags: "${{ vars.DOCKERHUB_USERNAME }}/books-pyapi:latest"

      - name: Build and Push
        uses: docker/build-push-action@v4
        if: github.ref == 'refs/heads/main'
        with:
          push: true
          tags: "${{ vars.DOCKERHUB_USERNAME }}/books-pyapi:latest"
          
  deploy:
    name: App deployment
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    steps:

      - name: Deploy latest revision
        run: aws ecs update-service --cluster books-pyapi --service books-pyapi --force-new-deployment

